/*
 * Copyright (c) 2022 Nango, all rights reserved.
 */
import { connect } from 'amqplib';
import { NangoMessageAction } from '@nangohq/core';
import * as core from '@nangohq/core';
export default class Nango {
    /** -------------------- Private Properties -------------------- */
    sendQueueId = 'server_inbound';
    receiveQueueId = 'server_outbound';
    connection;
    sendChannel;
    receiveChannel;
    nangoServerHost;
    nangoServerPort;
    /** -------------------- Public Methods -------------------- */
    constructor(host, port) {
        this.nangoServerHost = host ? host : 'localhost';
        this.nangoServerPort = port ? port : 5672;
    }
    async connect() {
        await this.connectRabbit();
    }
    async registerConnection(integration, userId, oAuthAccessToken, additionalConfig) {
        const msg = {
            integration: integration,
            userId: userId,
            oAuthAccessToken: oAuthAccessToken,
            additionalConfig: additionalConfig,
            action: NangoMessageAction.REGISTER_CONNECTION
        };
        return this.sendMessageToServer(msg);
    }
    async triggerAction(integration, triggerAction, userId, input) {
        const msg = {
            integration: integration,
            triggeredAction: triggerAction,
            userId: userId,
            input: input,
            action: NangoMessageAction.TRIGGER_ACTION
        };
        return this.sendMessageToServer(msg);
    }
    close() {
        this.connection?.close();
    }
    /** -------------------- Private Methods -------------------- */
    async sendMessageToServer(nangoMsg) {
        let correlationId = core.makeId(8);
        let promise = new Promise((resolve, reject) => {
            this.receiveChannel?.consume(this.receiveQueueId, (msg) => {
                if (msg === null) {
                    return;
                }
                if (msg?.properties.correlationId == correlationId) {
                    const nangoMsg = JSON.parse(msg.content.toString());
                    if (nangoMsg.success) {
                        resolve(nangoMsg.returnValue);
                    }
                    else {
                        reject(nangoMsg.errorMsg);
                    }
                }
            }, {
                noAck: true
            });
            this.sendChannel?.sendToQueue(this.sendQueueId, Buffer.from(JSON.stringify(nangoMsg), 'utf8'), {
                correlationId: correlationId,
                replyTo: this.receiveQueueId
            });
        });
        return promise;
    }
    async connectRabbit() {
        this.connection = await connect('amqp://' + this.nangoServerHost + ':' + this.nangoServerPort);
        this.sendChannel = await this.connection.createChannel();
        await this.sendChannel.assertQueue(this.sendQueueId);
        this.receiveChannel = await this.connection.createChannel();
        await this.receiveChannel.assertQueue(this.receiveQueueId);
    }
}
//# sourceMappingURL=nango.js.map