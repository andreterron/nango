"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[353],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},i=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(h,l(l({ref:t},i),{},{components:a})):n.createElement(h,l({ref:t},i))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(7462),r=a(7294),o=a(6010),l=a(2389),s=a(7392),p=a(7094),c=a(2466);const i="tabList__CuJ",u="tabItem_LNqP";function m(e){var t;const{lazy:a,block:l,defaultValue:m,values:d,groupId:h,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=d??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,s.l)(k,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==f&&!k.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:v}=(0,p.U)(),[_,w]=(0,r.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=h){const e=N[h];null!=e&&e!==_&&k.some((t=>t.value===e))&&w(e)}const S=e=>{const t=e.currentTarget,a=x.indexOf(t),n=k[a].value;n!==_&&(T(t),w(n),null!=h&&v(h,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;a=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;a=x[t]??x[x.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",i)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},g)},k.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>x.push(e),onKeyDown:E,onClick:S},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":_===t})}),a??t)}))),a?(0,r.cloneElement)(b.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function d(e){const t=(0,l.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},2888:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),o=a(5488),l=a(5162);const s={sidebar_label:"Real World Examples"},p="Real world examples",c={unversionedId:"real-world-examples",id:"real-world-examples",title:"Real world examples",description:"A collection of cool things people have built with Nango.",source:"@site/docs/real-world-examples.md",sourceDirName:".",slug:"/real-world-examples",permalink:"/real-world-examples",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/real-world-examples.md",tags:[],version:"current",frontMatter:{sidebar_label:"Real World Examples"},sidebar:"docsSidebar",previous:{title:"Adding a Sync",permalink:"/add-sync"},next:{title:"Deploying to production",permalink:"/production-deployment"}},i={},u=[{value:"Reddit: Sync all posts/submissions from a subreddit",id:"reddit-sync-all-postssubmissions-from-a-subreddit",level:2},{value:"Slack: Sync all posts from a Slack channel",id:"slack-sync-all-posts-from-a-slack-channel",level:2},{value:"Github: Sync all stargazers from a repo",id:"github-sync-all-stargazers-from-a-repo",level:2},{value:"HubSpot: Sync all HubSpot (CRM) contacts",id:"hubspot-sync-all-hubspot-crm-contacts",level:2}],m={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"real-world-examples"},"Real world examples"),(0,r.kt)("p",null,"A collection of cool things people have built with Nango.",(0,r.kt)("br",{parentName:"p"}),"\n","The sidebar to the right has an index so you can directly jump to your favorite \ud83d\udc49"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Want to run one of these? You can find these (and more) all ready to run in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"/examples")," folder in the repo")),(0,r.kt)("li",{parentName:"ul"},"Need help with one of these (or another API/endpoint)? Reach out on our ",(0,r.kt)("a",{parentName:"li",href:"https://nango.dev/slack"},"Community Slack"),", we are online all day and happy to help!"),(0,r.kt)("li",{parentName:"ul"},"Want to share yours? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/nangohq/nango/tree/main/docs/docs/real-world-examples.md"},"Edit this file and submit a PR!"))),(0,r.kt)("h2",{id:"reddit-sync-all-postssubmissions-from-a-subreddit"},"Reddit: Sync all posts/submissions from a subreddit"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.reddit.com/dev/api/#GET_new"},"https://www.reddit.com/dev/api/#GET_new")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all submissions from a subreddit to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet nango_options = {\n    response_path: 'data.children',\n    paging_cursor_object_response_path: 'data.name',\n    paging_cursor_request_path: 'after',\n    max_total: 100\n};\n\nnew Nango().sync('https://www.reddit.com/r/${subreddit}/new.json', nango_options);  // Replace ${subreddit} with your subreddit\n"))),(0,r.kt)(l.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://www.reddit.com/r/${subreddit}/new.json",\n"method": "GET",\n"response_path": "data.children",\n"paging_cursor_request_path": "after",\n"paging_cursor_object_response_path": "paging.next.after"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncRedditSubredditPosts <subreddit>\n")),(0,r.kt)("h2",{id:"slack-sync-all-posts-from-a-slack-channel"},"Slack: Sync all posts from a Slack channel"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://api.slack.com/methods/conversations.history"},"https://api.slack.com/methods/conversations.history")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all posts from a Slack channel to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet nango_options = {\n  response_path: 'messages',\n  paging_cursor_metadata_response_path: 'response_metadata.next_cursor',\n  paging_cursor_request_path: 'cursor',\n  headers: {\n      authorization: `Bearer ${app_token}`  // Replace with your Slack oauth_token\n  },\n  query_params: {\n      channel: ${channel_id}  // Replace with the id of the channel you want to sync\n  }\n};\n\nnew Nango().sync('https://slack.com/api/conversations.history', nango_options); \n"))),(0,r.kt)(l.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://slack.com/api/conversations.history",\n"method": "GET",\n"response_path": "messages",\n"paging_cursor_request_path": "cursor",\n"paging_cursor_metadata_response_path": "response_metadata.next_cursor"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncSlackMessages <oauth_token> <channel_id>\n")),(0,r.kt)("h2",{id:"github-sync-all-stargazers-from-a-repo"},"Github: Sync all stargazers from a repo"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/activity/starring#list-stargazers"},"https://docs.github.com/en/rest/activity/starring#list-stargazers")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all stargazers from a repo to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet owner = 'nangohq';  // Replace with your github account\nlet repo = 'nango';     // Replace with your repo\n\nlet config = {\n    headers: {\n        authorization: `Bearer ${api_token}`  // Replace with your Github API token\n    },\n    paging_header_link_rel: 'next'\n};\n\nnew Nango().sync('https://api.github.com/repos/${owner}/${repo}/stargazers', nango_options); \n"))),(0,r.kt)(l.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://api.github.com/repos/nangohq/nango/stargazers",\n"method": "GET",\n"headers": {\n"authorization": "Bearer <api_token>"\n},\n"paging_header_link_rel": "next"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncGithubStargazers <api_token>\n")),(0,r.kt)("h2",{id:"hubspot-sync-all-hubspot-crm-contacts"},"HubSpot: Sync all HubSpot (CRM) contacts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://developers.hubspot.com/docs/api/crm/contacts"},"https://developers.hubspot.com/docs/api/crm/contacts"),(0,r.kt)("br",{parentName:"p"}),"\n",'(click on the "Endpoints" tab, the use the dropdown to find the endpoint or scroll down)'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync contacts from the HubSpot CRM to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet nango_options = {\n    headers: {\n        'Authorization': 'Bearer YOUR_ACCESS_TOKEN'  // Replace with user's access token\n    },\n    response_path: 'results',\n    unique_key: 'id',\n    paging_cursor_request_path: 'after',\n    paging_cursor_metadata_response_path: 'paging.next.after'\n};\n\nnew Nango().sync('https://api.hubapi.com/crm/v3/objects/contacts?limit=10&archived=false', nango_options);\n"))),(0,r.kt)(l.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://api.hubapi.com/crm/v3/objects/contacts?limit=10&archived=false",\n"method": "GET",\n"headers": { "Authorization": "Bearer YOUR_ACCESS_TOKEN"},\n"response_path": "results",\n"unique_key": "id",\n"paging_cursor_request_path": "after",\n"paging_cursor_metadata_response_path": "paging.next.after"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncHubspotContacts <oauth_token>\n")))}d.isMDXComponent=!0}}]);