"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[75],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,d=c["".concat(p,".").concat(m)]||c[m]||h[m]||a;return n?o.createElement(d,l(l({ref:t},u),{},{components:n})):o.createElement(d,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_label:"Contribute a new API"},l="Contributing a new API",i={unversionedId:"pizzly/contribute-api",id:"pizzly/contribute-api",title:"Contributing a new API",description:"Adding support for a new API to Pizzly is fast & easy. Please follow the steps below and we will be happy to accept your PR!",source:"@site/docs/pizzly/contribute-api.md",sourceDirName:"pizzly",slug:"/pizzly/contribute-api",permalink:"/pizzly/contribute-api",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/pizzly/contribute-api.md",tags:[],version:"current",frontMatter:{sidebar_label:"Contribute a new API"},sidebar:"pizzly",previous:{title:"Getting started",permalink:"/pizzly/getting-started"},next:{title:"Migrating from v0.2",permalink:"/pizzly/migration"}},p={},s=[{value:"Step 0: A quick overview of how API templates work in Pizzly",id:"step-0-a-quick-overview-of-how-api-templates-work-in-pizzly",level:2},{value:"Step 1: Add your new API to <code>templates.yaml</code>",id:"step-1-add-your-new-api-to-templatesyaml",level:2},{value:"Step 2: Test your new API",id:"step-2-test-your-new-api",level:2},{value:"Step 3: Submit your PR",id:"step-3-submit-your-pr",level:2},{value:"Where to get help",id:"where-to-get-help",level:2}],u={toc:s};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contributing-a-new-api"},"Contributing a new API"),(0,r.kt)("p",null,"Adding support for a new API to Pizzly is fast & easy. Please follow the steps below and we will be happy to accept your PR!"),(0,r.kt)("p",null,"If you find a bug with one of the existing APIs feel free to use these steps to submit a PR with a fix. Thank you!"),(0,r.kt)("h2",{id:"step-0-a-quick-overview-of-how-api-templates-work-in-pizzly"},"Step 0: A quick overview of how API templates work in Pizzly"),(0,r.kt)("p",null,"Support for the OAuth flow of different APIs in Pizzly is implemented with templates: A small config that tells Pizzly how to perform the OAuth flow for the specific API."),(0,r.kt)("p",null,"All templates of Pizzly live in a single file called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/Pizzly/blob/master/packages/server/templates.yaml"},"templates.yaml")," in the server package. ",(0,r.kt)("a",{parentName:"p",href:"https://yaml.org/"},"More about YAML here"),"."),(0,r.kt)("p",null,"Most templates only need to make use of 2-3 configuration keys, but in some cases you might need more.\nFor a full list of configuration options please check the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/Pizzly/blob/master/packages/server/lib/models.ts"},"type definitions here"),"."),(0,r.kt)("p",null,"The most commonly used configuration options are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# All keys & slugs use lowercase and snake_case\nprovider_slug:                                              # Shorthand for the provider, ideally the API's name. Must be unique.\n    # Mandatory fields\n    auth_mode: OAUTH2                                       # Either OAUTH1 (for OAuth 1.0a) or OAUTH2\n    authorization_url: https://gitlab.com/oauth/authorize   # The URL of the authorization page for the OAuth service\n    token_url: https://gitlab.com/oauth/token               # The URL for the token request\n\n    # Optional fields\n    authorization_params:                                   # Additional parameters to pass along in the authorization step\n        response_type: code\n    token_params:                                           # Additional parameters to pass along in the token request\n        mycoolparam: value\n    refresh_url: https://api.example.com/oauth/refresh      # The URL to use for refreshing the access token, if different from token_url\n    scope_separator: ','                                    # String to use to separate scopes. Defaults to ' ' (1 space) if not provided\n")),(0,r.kt)("h2",{id:"step-1-add-your-new-api-to-templatesyaml"},"Step 1: Add your new API to ",(0,r.kt)("inlineCode",{parentName:"h2"},"templates.yaml")),(0,r.kt)("p",null,"Fork the repo and edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"templates.yaml")," file as explained above to add support for the new API. The API documentation should contain all the details you need on the OAuth flow to complete this step."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#where-to-get-help"},"We are here")," if you need help with this."),(0,r.kt)("h2",{id:"step-2-test-your-new-api"},"Step 2: Test your new API"),(0,r.kt)("p",null,"To test your new API:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add a provider config for the new API with the CLI (see ",(0,r.kt)("a",{parentName:"li",href:"/pizzly/getting-started"},"Getting started")," if needed)"),(0,r.kt)("li",{parentName:"ol"},"Start Pizzly locally (see below)"),(0,r.kt)("li",{parentName:"ol"},"Use the built-in test page to trigger an OAuth flow of your new API. For this CD to ",(0,r.kt)("inlineCode",{parentName:"li"},"packages/frontend")," and run a local Python webserver with ",(0,r.kt)("inlineCode",{parentName:"li"},"python3 -m http.server 8080"),". You can now access the test page at ",(0,r.kt)("a",{parentName:"li",href:"http://localhost:8080/bin/sample.html"},"http://localhost:8080/bin/sample.html"),"."),(0,r.kt)("li",{parentName:"ol"},"Run a full OAuth dance and make sure it works as expected")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To run Pizzly locally follow these steps:")),(0,r.kt)("p",null,"You need the latest stable node version as well as a recent version of npm (or npm compatible package manager) installed on your machine."),(0,r.kt)("p",null,"In the root of the repo run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i\n")),(0,r.kt)("p",null,"Then start the Postgresql docker container. The easiest way to do this is to run docker compose and then stop the Pizzly server (but keep the DB running):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up\n")),(0,r.kt)("p",null,"Then stop the Pizzly server and keep the postgres container running."),(0,r.kt)("p",null,"Now you can start the Pizzly server locally:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd packages/server\nnpm run start\n")),(0,r.kt)("p",null,"After a short while you should see a message that the server is running an listening on port 3004."),(0,r.kt)("h2",{id:"step-3-submit-your-pr"},"Step 3: Submit your PR"),(0,r.kt)("p",null,"Submit your PR with the new API to the Pizzly repo. Please make sure to mention that you tested the full flow and that it works. We will review your PR asap and merge it into the main Pizzly repo for inclusion with the next release."),(0,r.kt)("h2",{id:"where-to-get-help"},"Where to get help"),(0,r.kt)("p",null,"If you get stuck or need help please join our ",(0,r.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community")," where the Pizzly contributors hang out. We will do our best to help you and get Pizzly to work with the OAuth flow of your API."))}h.isMDXComponent=!0}}]);