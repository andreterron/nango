"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[353],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=i(a),d=r,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return a?n.createElement(h,s(s({ref:t},u),{},{components:a})):n.createElement(h,s({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var i=2;i<o;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(7462),r=a(7294),o=a(6010),s=a(2389),l=a(7392),p=a(7094),i=a(2466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:a,block:s,defaultValue:m,values:d,groupId:h,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,l.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===m?m:m??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==k&&!y.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:v}=(0,p.U)(),[_,w]=(0,r.useState)(k),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,i.o5)();if(null!=h){const e=N[h];null!=e&&e!==_&&y.some((t=>t.value===e))&&w(e)}const S=e=>{const t=e.currentTarget,a=x.indexOf(t),n=y[a].value;n!==_&&(T(t),w(n),null!=h&&v(h,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;a=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;a=x[t]??x[x.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},g)},y.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>x.push(e),onKeyDown:E,onClick:S},s,{className:(0,o.Z)("tabs__item",c,null==s?void 0:s.className,{"tabs__item--active":_===t})}),a??t)}))),a?(0,r.cloneElement)(b.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function d(e){const t=(0,s.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},2888:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905)),o=a(5488),s=a(5162);const l={},p="Examples of Nango Sync",i={unversionedId:"real-world-examples",id:"real-world-examples",title:"Examples of Nango Sync",description:"The examples on this page are just a handful of the millions of APIs Nango supports out of the box, it is far from a complete list.",source:"@site/docs/real-world-examples.md",sourceDirName:".",slug:"/real-world-examples",permalink:"/real-world-examples",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/real-world-examples.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Observability",permalink:"/nango-sync/observability"},next:{title:"Deploying Nango to production",permalink:"/production-deployment"}},u={},c=[{value:"Reddit: Sync all posts/submissions from a subreddit",id:"reddit-sync-all-postssubmissions-from-a-subreddit",level:2},{value:"Slack: Sync all posts from a Slack channel",id:"slack-sync-all-posts-from-a-slack-channel",level:2},{value:"Github: Sync all stargazers from a repo",id:"github-sync-all-stargazers-from-a-repo",level:2},{value:"HubSpot: Sync all HubSpot (CRM) contacts",id:"hubspot-sync-all-hubspot-crm-contacts",level:2}],m={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples-of-nango-sync"},"Examples of Nango Sync"),(0,r.kt)("admonition",{title:"Nango works with any API that returns JSON",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The examples on this page are just a handful of the millions of APIs Nango supports out of the box, it is far from a complete list."),(0,r.kt)("p",{parentName:"admonition"},"If you are unsure if your API is supported by Nango feel free to try it (we found that by now 80%+ of APIs work out of the box) or ask us on the ",(0,r.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community"),": We are happy to help!")),(0,r.kt)("p",null,"A collection of cool things people have built with Nango.",(0,r.kt)("br",{parentName:"p"}),"\n","The sidebar to the right has an index so you can directly jump to your favorite \ud83d\udc49"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Want to run one of these? You can find these (and more) all ready to run in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"/examples")," folder in the repo")),(0,r.kt)("li",{parentName:"ul"},"Need help with one of these (or another API/endpoint)? Reach out on our ",(0,r.kt)("a",{parentName:"li",href:"https://nango.dev/slack"},"Community Slack"),", we are online all day and happy to help!"),(0,r.kt)("li",{parentName:"ul"},"Want to share yours? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/nangohq/nango/tree/main/docs/docs/real-world-examples.md"},"Edit this file and submit a PR!"))),(0,r.kt)("h2",{id:"reddit-sync-all-postssubmissions-from-a-subreddit"},"Reddit: Sync all posts/submissions from a subreddit"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.reddit.com/dev/api/#GET_new"},"https://www.reddit.com/dev/api/#GET_new")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all submissions from a subreddit to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet nango_options = {\n    response_path: 'data.children',\n    paging_cursor_object_response_path: 'data.name',\n    paging_cursor_request_path: 'after',\n    max_total: 100\n};\n\nnew Nango().sync('https://www.reddit.com/r/${subreddit}/new.json', nango_options);  // Replace ${subreddit} with your subreddit\n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://www.reddit.com/r/${subreddit}/new.json",\n"method": "GET",\n"response_path": "data.children",\n"paging_cursor_request_path": "after",\n"paging_cursor_object_response_path": "paging.next.after"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncRedditSubredditPosts <subreddit>\n")),(0,r.kt)("h2",{id:"slack-sync-all-posts-from-a-slack-channel"},"Slack: Sync all posts from a Slack channel"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://api.slack.com/methods/conversations.history"},"https://api.slack.com/methods/conversations.history")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all posts from a Slack channel to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet nango_options = {\n  response_path: 'messages',\n  paging_cursor_metadata_response_path: 'response_metadata.next_cursor',\n  paging_cursor_request_path: 'cursor',\n  headers: {\n      authorization: `Bearer ${app_token}`  // Replace with your Slack oauth_token\n  },\n  query_params: {\n      channel: ${channel_id}  // Replace with the id of the channel you want to sync\n  }\n};\n\nnew Nango().sync('https://slack.com/api/conversations.history', nango_options); \n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://slack.com/api/conversations.history",\n"method": "GET",\n"response_path": "messages",\n"paging_cursor_request_path": "cursor",\n"paging_cursor_metadata_response_path": "response_metadata.next_cursor"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncSlackMessages <oauth_token> <channel_id>\n")),(0,r.kt)("h2",{id:"github-sync-all-stargazers-from-a-repo"},"Github: Sync all stargazers from a repo"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/activity/starring#list-stargazers"},"https://docs.github.com/en/rest/activity/starring#list-stargazers")),(0,r.kt)("p",null,"This example syncs the stargazers of multiple different repos (and users) into a single table (we use ",(0,r.kt)("inlineCode",{parentName:"p"},"github_stargazers")," here). It also adds metadata attributes, which get attached to every synced record. This metadata makes it easy to query e.g. all stargazers of repo X, user id Y or GitHub org Z."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all stargazers from a repo to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet user_id = 1;        // Replace with your user id (can be any value)\nlet owner = 'nangohq';  // Replace with your github account\nlet repo = 'nango';     // Replace with your repo\n\nlet config = {\n        mapped_table: 'github_stargazers',                 // Name of the destination table\n        metadata: {                                        // Metadata that will get attached to every synced row\n            user_id: user_id,                              // Our internal user id (or account id etc.)\n            github_org: owner,                             // The GitHub org\n            github_repo: repo                              // The repo name\n        },\n        unique_key: 'id',                                   // The key of the unique id in the records, for upserts\n\n        headers: {                                         // HTTP headers to be sent with every API request\n            'Accept': 'application/vnd.github+json'                    // GitHub recommends passing this for every API request\n        },\n\n        paging_header_link_rel: 'next'                     // For pagination.\n};\n\nnew Nango().sync('https://api.github.com/repos/${owner}/${repo}/stargazers', nango_options); \n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://api.github.com/repos/nangohq/nango/stargazers",\n"method": "GET",\n"mapped_table": "github_stargazers",\n"metadata": {\n"user_id": 1,\n"github_org": "NangoHQ",\n"github_repo": "nango"\n},\n"unique_key": id,\n"headers": {\n"Accept": "application/vnd.github+json"\n},\n"paging_header_link_rel": "next"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncGithubStargazers <owner> <repo> <user-id>\n")),(0,r.kt)("h2",{id:"hubspot-sync-all-hubspot-crm-contacts"},"HubSpot: Sync all HubSpot (CRM) contacts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://developers.hubspot.com/docs/api/crm/contacts"},"https://developers.hubspot.com/docs/api/crm/contacts"),(0,r.kt)("br",{parentName:"p"}),"\n",'(click on the "Endpoints" tab, the use the dropdown to find the endpoint or scroll down)'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync contacts from the HubSpot CRM to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet nango_options = {\n    headers: {\n        'Authorization': 'Bearer YOUR_ACCESS_TOKEN'  // Replace with user's access token\n    },\n    response_path: 'results',\n    unique_key: 'id',\n    paging_cursor_request_path: 'after',\n    paging_cursor_metadata_response_path: 'paging.next.after'\n};\n\nnew Nango().sync('https://api.hubapi.com/crm/v3/objects/contacts?limit=10&archived=false', nango_options);\n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://api.hubapi.com/crm/v3/objects/contacts?limit=10&archived=false",\n"method": "GET",\n"headers": { "Authorization": "Bearer YOUR_ACCESS_TOKEN"},\n"response_path": "results",\n"unique_key": "id",\n"paging_cursor_request_path": "after",\n"paging_cursor_metadata_response_path": "paging.next.after"\n}\'\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/nango/tree/main/examples"},"repo's examples directory")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start syncHubspotContacts <oauth_token>\n")))}d.isMDXComponent=!0}}]);