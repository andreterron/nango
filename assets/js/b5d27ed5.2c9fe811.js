"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1716:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},i="Other configuration",l={unversionedId:"pizzly/pizzly-configuration",id:"pizzly/pizzly-configuration",title:"Other configuration",description:"Callback URL",source:"@site/docs/pizzly/pizzly-configuration.md",sourceDirName:"pizzly",slug:"/pizzly/pizzly-configuration",permalink:"/pizzly/pizzly-configuration",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/pizzly/pizzly-configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"pizzly",previous:{title:"Storage & Logs",permalink:"/pizzly/pizzly-storage"},next:{title:"CLI",permalink:"/pizzly/pizzly-cli"}},p={},c=[{value:"Callback URL",id:"callback-url",level:3},{value:"CLI Host &amp; Port",id:"cli-host--port",level:3},{value:"Connection Configuration &amp; Template String Interpolation",id:"connection-config",level:3}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"other-configuration"},"Other configuration"),(0,o.kt)("h3",{id:"callback-url"},"Callback URL"),(0,o.kt)("p",null,"The OAuth callback URL is used by external API to communicate authorization responses to the Pizzly server. "),(0,o.kt)("p",null,"By default, the callback URL is ",(0,o.kt)("inlineCode",{parentName:"p"},"$SERVER_HOST:$SERVER_PORT/oauth/callback"),". If you are following the ",(0,o.kt)("a",{parentName:"p",href:"/pizzly/getting-started"},"Getting Started"),", it is ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3003/oauth/callback"),". "),(0,o.kt)("p",null,"You will need to register this callback URL with the external API, in additional to obtaining a developer ID, secret and registering access scopes."),(0,o.kt)("p",null,"You can customize the callback URL to point to a proxy server by editing the ",(0,o.kt)("inlineCode",{parentName:"p"},"AUTH_CALLBACK_URL")," environment variable in the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file at the root of the Pizzly folder."),(0,o.kt)("h3",{id:"cli-host--port"},"CLI Host & Port"),(0,o.kt)("p",null,"By default, the CLI uses the host/port ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3003")," to call the Pizzly server. You can customize this by setting the environment variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"PIZZLY_HOSTPORT")," in your CLI environment, using a ",(0,o.kt)("inlineCode",{parentName:"p"},".bashrc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".zshrc")," file."),(0,o.kt)("p",null,"Learn more about the ",(0,o.kt)("a",{parentName:"p",href:"pizzly-cli"},"Pizzly CLI"),"."),(0,o.kt)("h3",{id:"connection-config"},"Connection Configuration & Template String Interpolation"),(0,o.kt)("p",null,"Certain APIs have dynamic OAuth URLs. For example, Zendesk has the following authorization URL ",(0,o.kt)("inlineCode",{parentName:"p"},"https://[SUBDOMAIN].zendesk.com/oauth/authorizations/new")," where the subdomain is specific to a Pizzly Connection."),(0,o.kt)("p",null,"To address this, an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"connectionConfig")," parameter, itself having a freeform ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," field, can be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"pizzly.auth(...)")," method in the frontend Javascript SDK. "),(0,o.kt)("p",null,"Taking the example of Zendesk again, the authorization URL is ",(0,o.kt)("inlineCode",{parentName:"p"},"https://${connectionConfig.params.subdomain}.zendesk.com/oauth/authorizations/new")," in the ",(0,o.kt)("a",{parentName:"p",href:"https://nango.dev/oauth-providers"},"Provider Templates"),". "),(0,o.kt)("p",null,"You would have to call the frontend Javascript SDK with the following parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"pizzly.auth(<provider-config-key>, <connection-id>, { params: { subdomain: <zendesk-subdomain>}})\n\n")))}u.isMDXComponent=!0}}]);