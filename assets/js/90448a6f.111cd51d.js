"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[227],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,b=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?o.createElement(b,i(i({ref:n},p),{},{components:t})):o.createElement(b,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const a={},i="Observability",l={unversionedId:"nango-sync/observability",id:"nango-sync/observability",title:"Observability",description:"Observability is some of the most time-consuming infrastructure to set up when building external integrations in-house. To relieve engineering teams from this burden, Nango aims at providing powerful out-of-the-box tooling for observing interactions with external APIs.",source:"@site/docs/nango-sync/observability.md",sourceDirName:"nango-sync",slug:"/nango-sync/observability",permalink:"/nango-sync/observability",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/nango-sync/observability.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"DB configuration",permalink:"/nango-sync/db-config"},next:{title:"Examples of Nango Sync",permalink:"/real-world-examples"}},s={},c=[{value:"Inspect Sync jobs in the DB",id:"inspect-sync-jobs-in-the-db",level:2},{value:"Inspect logs",id:"inspect-logs",level:2},{value:"Temporal Admin Panel",id:"temporal-admin-panel",level:2},{value:"Problems with your Sync? We are here to help!",id:"problems-with-your-sync-we-are-here-to-help",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"observability"},"Observability"),(0,r.kt)("p",null,"Observability is some of the most time-consuming infrastructure to set up when building external integrations in-house. To relieve engineering teams from this burden, Nango aims at providing powerful out-of-the-box tooling for observing interactions with external APIs."),(0,r.kt)("p",null,"While we will continue to make Nango more observable, there are already multiple ways that you can observe and debug Nango Syncs:"),(0,r.kt)("h2",{id:"inspect-sync-jobs-in-the-db"},"Inspect Sync jobs in the DB"),(0,r.kt)("p",null,"Sync jobs are the individual runs of Syncs.\nYou can access all the information about Sync job execution in Nango's destination database, in the table ",(0,r.kt)("inlineCode",{parentName:"p"},"_nango_jobs")," within the schema ",(0,r.kt)("inlineCode",{parentName:"p"},"nango"),". "),(0,r.kt)("p",null,"Each jobs displays information about: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start and end time"),(0,r.kt)("li",{parentName:"ul"},"Status"),(0,r.kt)("li",{parentName:"ul"},"Error message (in case of failure)"),(0,r.kt)("li",{parentName:"ul"},"Error stack trace (in case of failure)"),(0,r.kt)("li",{parentName:"ul"},"Added/updated/deleted/unchanged row counts (in case of success)"),(0,r.kt)("li",{parentName:"ul"},"Page count"),(0,r.kt)("li",{parentName:"ul"},"Attempts")),(0,r.kt)("h2",{id:"inspect-logs"},"Inspect logs"),(0,r.kt)("p",null,"When you run Nango locally with docker compose you can view the combined logs for all Nango containers, in real-time, with this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker compose logs --follow\n")),(0,r.kt)("p",null,"By default, Nango logs info-level messages and above. You can make logs more verbose by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," (or less verbose by setting it to ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),") in the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,r.kt)("h2",{id:"temporal-admin-panel"},"Temporal Admin Panel"),(0,r.kt)("p",null,"Additionally, as Nango uses ",(0,r.kt)("a",{parentName:"p",href:"https://temporal.io/"},"Temporal")," to orchestrates Sync jobs, you can further debug Sync job executions by logging to the Temporal admin panel. "),(0,r.kt)("p",null,"To enable the Temporal UI, you should run the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," Docker compose with the following command: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f docker-compose.debug.yaml up\n")),(0,r.kt)("p",null,"You can now view, debug and control Temporal workflows (corresponding to Sync jobs) on the Temporal UI at http://localhost:8011."),(0,r.kt)("h2",{id:"problems-with-your-sync-we-are-here-to-help"},"Problems with your Sync? We are here to help!"),(0,r.kt)("p",null,"If you need help or run into issues, please reach out! We are online and responsive all day on the ",(0,r.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack Community"),"."))}u.isMDXComponent=!0}}]);