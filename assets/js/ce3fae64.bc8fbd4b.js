"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[438],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},i=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?o.createElement(g,l(l({ref:n},i),{},{components:t})):o.createElement(g,l({ref:n},i))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var p=2;p<r;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const r={},l="Deploy Nango to AWS (EC2)",c={unversionedId:"nango-deploy/aws",id:"nango-deploy/aws",title:"Deploy Nango to AWS (EC2)",description:"Deploy Nango on AWS in less than 5 minutes.",source:"@site/docs/nango-deploy/aws.md",sourceDirName:"nango-deploy",slug:"/nango-deploy/aws",permalink:"/nango-deploy/aws",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/nango-deploy/aws.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Deploy Nango on your local machine",permalink:"/nango-deploy/local"},next:{title:"Deploy Nango to GCP (Compute Engine)",permalink:"/nango-deploy/gcp"}},s={},p=[{value:"Create a VM",id:"create-vm",level:2},{value:"Install Docker",id:"install-docker",level:2},{value:"Run Nango",id:"run-nango",level:2},{value:"Update Nango",id:"update-nango",level:2}],i={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-nango-to-aws-ec2"},"Deploy Nango to AWS (EC2)"),(0,a.kt)("p",null,"Deploy Nango on AWS in less than 5 minutes."),(0,a.kt)("h2",{id:"create-vm"},"Create a VM"),(0,a.kt)("p",null,"Go to the ",(0,a.kt)("a",{parentName:"p",href:"https://console.aws.amazon.com/ec2/v2/home"},"EC2 service")," and click Launch Instance. Create an instance with default settings except: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"t2.medium")," for testing, ",(0,a.kt)("inlineCode",{parentName:"li"},"t2.large")," for production"),(0,a.kt)("li",{parentName:"ul"},"Enable ",(0,a.kt)("em",{parentName:"li"},"Allow HTTPS traffic from the internet")," and ",(0,a.kt)("em",{parentName:"li"},"Allow HTTP traffic from the internet"))),(0,a.kt)("p",null,"On the completion page, click ",(0,a.kt)("em",{parentName:"p"},"Connect to instance")," and note the ",(0,a.kt)("em",{parentName:"p"},"Public IP address")," somewhere (referred below as INSTANCE_IP)."),(0,a.kt)("h2",{id:"install-docker"},"Install Docker"),(0,a.kt)("p",null,"Go to your EC2 instance page and click ",(0,a.kt)("em",{parentName:"p"},"Connect,")," then ",(0,a.kt)("em",{parentName:"p"},"Connect")," again on the next page to access your instance\u2019s console via SSH. "),(0,a.kt)("p",null,"Install Docker & Docker Compose with the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo yum update -y && sudo yum install -y docker && sudo service docker start && sudo usermod -a -G docker $USER\ncurl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url  | grep docker-compose-linux-x86_64 | cut -d '\"' -f 4 | wget -qi -\nchmod +x docker-compose-linux-x86_64 && sudo mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose\ndocker-compose --version\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Refresh the VM console page to activate the new configuration.")),(0,a.kt)("h2",{id:"run-nango"},"Run Nango"),(0,a.kt)("p",null,"Still in your VM\u2019s console, install Nango by running: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir nango && cd nango\nwget https://raw.githubusercontent.com/NangoHQ/nango/main/docker/aws/docker-compose.yaml && wget https://raw.githubusercontent.com/NangoHQ/nango/main/.env\ndocker-compose up -d # Nango is now running!\n")),(0,a.kt)("p",null,"In your local computer\u2019s console, create a Nango Sync by running (replace ",(0,a.kt)("inlineCode",{parentName:"p"},"INSTANCE_IP")," if the value from the ",(0,a.kt)("a",{parentName:"p",href:"#create-vm"},"Create a VM")," section): "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n    --url http://[INSTANCE_IP]/v1/syncs \\\n    --header "Content-type: application/json" \\\n    --data \'{"url": "https://pokeapi.co/api/v2/pokemon", "response_path": "results", "paging_url_path":"next", "mapped_table":"pokemons", "frequency":"1 minute"}\'\n')),(0,a.kt)("p",null,"Back to your VM\u2019s console, run: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose logs -f\n")),(0,a.kt)("p",null,"Console logs should show that jobs are running successfully (1st job should fetch 1000+ Pok\xe9mon, subsequent jobs should check that no new Pok\xe9mon was added)."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This tutorial uses a local DB on the VM. Your should now connect Nango to your own database (cf. ",(0,a.kt)("a",{parentName:"p",href:"nango-sync/db-config#specifying-the-postgres-database"},"docs"),").")),(0,a.kt)("h2",{id:"update-nango"},"Update Nango"),(0,a.kt)("p",null,"In your VM\u2019s console, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose stop\ndocker-compose rm -f\ndocker-compose pull\ndocker-compose up -d\n")))}u.isMDXComponent=!0}}]);