"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4e3],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(t),p=a,g=h["".concat(l,".").concat(p)]||h[p]||d[p]||i;return t?o.createElement(g,r(r({ref:n},u),{},{components:t})):o.createElement(g,r({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(7294),a=t(6010);const i="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,r),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>p});var o=t(7462),a=t(7294),i=t(6010),r=t(2389),s=t(7392),l=t(7094),c=t(2466);const u="tabList__CuJ",d="tabItem_LNqP";function h(e){var n,t;const{lazy:r,block:h,defaultValue:p,values:g,groupId:f,className:m}=e,k=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:k.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),b=(0,s.l)(y,((e,n)=>e.value===n.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===p?p:null!=(n=null!=p?p:null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)?n:k[0].props.value;if(null!==w&&!y.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:C}=(0,l.U)(),[N,I]=(0,a.useState)(w),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=f){const e=v[f];null!=e&&e!==N&&y.some((n=>n.value===e))&&I(e)}const O=e=>{const n=e.currentTarget,t=T.indexOf(n),o=y[t].value;o!==N&&(x(n),I(o),null!=f&&C(f,String(o)))},A=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var o;const n=T.indexOf(e.currentTarget)+1;t=null!=(o=T[n])?o:T[0];break}case"ArrowLeft":{var a;const n=T.indexOf(e.currentTarget)-1;t=null!=(a=T[n])?a:T[T.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":h},m)},y.map((e=>{let{value:n,label:t,attributes:r}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>T.push(e),onKeyDown:A,onFocus:O,onClick:O},r,{className:(0,i.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),r?(0,a.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function p(e){const n=(0,r.Z)();return a.createElement(h,(0,o.Z)({key:String(n)},e))}},4543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var o=t(7462),a=(t(7294),t(3905)),i=t(5488),r=t(5162);const s={sidebar_label:"Working with user Connections",sidebar_position:4},l="Working with user Connections",c={unversionedId:"guides/user-connections",id:"guides/user-connections",title:"Working with user Connections",description:"Next to Integrations and Actions, (user) Connections are the third major element in the Nango Architecture.",source:"@site/docs/guides/user-connections.md",sourceDirName:"guides",slug:"/guides/user-connections",permalink:"/guides/user-connections",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/guides/user-connections.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Working with user Connections",sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Trigger an Action",permalink:"/guides/trigger-an-action"},next:{title:"Auth",permalink:"/guides/auth"}},u={},d=[{value:"How to register a new Connection",id:"how-to-register-a-new-connection",level:2},{value:"Storing user specific configuration &amp; accessing it in the Action",id:"additionalConfig",level:2},{value:"Getting all Connections for a specific user Id",id:"getting-all-connections-for-a-specific-user-id",level:2},{value:"Getting all Connections of a specific Integration",id:"getting-all-connections-of-a-specific-integration",level:2},{value:"Updating credentials for an existing Connection",id:"updating-credentials-for-an-existing-connection",level:2}],h={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"working-with-user-connections"},"Working with user Connections"),(0,a.kt)("p",null,"Next to Integrations and Actions, (user) Connections are the third major element in the Nango ",(0,a.kt)("a",{parentName:"p",href:"/architecture"},"Architecture"),"."),(0,a.kt)("p",null,"A Connection in Nango links together two things: An Integration and a user-id. When a user sets an Integration up we call this a Connection in Nango. The Connection stores all the relevant details about this user's specific setup of the Integration and you will interact with this object quite frequently when using Nango."),(0,a.kt)("p",null,"This guide gives you an overview of the most common patterns when working with Connections and how to implement them in your application."),(0,a.kt)("p",null,"Before we dive in, this is what a Connection object looks like in Nango:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    uuid: 'unique uuid of the Connection',  // Gets automatically set by Nango when the Connection is first registered\n    integration: 'example',                 // The name of the Integration in Nango\n    userId: '1',                            // The user's id (from your app)\n    dateCreated: '2022-08-10 16:08:23',     // Timestamp when the Connection was created\n    lastModified: '2022-08-10 16:08:23',    // Timestamp when the Connection was last modified (by you or Nango)\n    credentials: {                          // The current credentials for authorizing requests for this user\n        access_token: 'xxxxxxxxx',          // This depends on the auth method of the integration (e.g. here OAuth 2)\n        expires_at: '2022-08-10 18:08:23',\n        refresh_token: 'yyyyyyyyyyy',\n        raw: {                              // For OAuth credentials: The raw server response of the token request\n            access_token: 'xxxxxxxxx',\n            expires_at: '2022-08-10 18:08:23',\n            refresh_token: 'yyyyyyyyyyy',\n            server_response: 'I also got returned with the token'\n        }\n    },       \n    additionalConfig: {                     // Additional configuration set by your app for this connection\n        sample: 'value'                     // You can store any JSON serializable object here\n    }\n}                     \n")),(0,a.kt)("h2",{id:"how-to-register-a-new-connection"},"How to register a new Connection"),(0,a.kt)("p",null,"Now that you have built Integrations with Actions you want your users to be able to set them up in your application. There are two ways in which you can do this:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You ",(0,a.kt)("a",{parentName:"li",href:"/guides/auth#frontendOauth"},"trigger an OAuth flow in your frontend")," when the user wants to setup an Integration which supports OAuth ",(0,a.kt)("em",{parentName:"li"},"(recommended for OAuth based integrations)")),(0,a.kt)("li",{parentName:"ol"},"You register a new Connection from your backend by ",(0,a.kt)("a",{parentName:"li",href:"/reference/SDKs/node#registerConnection"},"calling ",(0,a.kt)("inlineCode",{parentName:"a"},"registerConnection"))," in the client SDK ",(0,a.kt)("em",{parentName:"li"},"(necessary for APIs which do not support OAuth)"))),(0,a.kt)("p",null,"Both cases will result in a Connection being registered in the Nango server. Once a Connection has been registered for a user you can start triggering actions for their user id as shown in ",(0,a.kt)("a",{parentName:"p",href:"/guides/trigger-an-action"},"Trigger an action"),"."),(0,a.kt)("p",null,"Check the links in the list above for examples of how to register a Connection in Nango with either method."),(0,a.kt)("h2",{id:"additionalConfig"},"Storing user specific configuration & accessing it in the Action"),(0,a.kt)("p",null,"For some integrations it makes sense to store additional configuration for every user who has the integration up:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"With a Slack integration you might want to store the channel ID where the user would like to receive notifications."),(0,a.kt)("li",{parentName:"ul"},"For a CRM integration you might want store a user specific mapping between a contact's fields and your internal fields")),(0,a.kt)("p",null,"For this Nango offers you the option to store an object, called ",(0,a.kt)("inlineCode",{parentName:"p"},"additionalConfig"),", along with the Connection. The Connection, and with it the ",(0,a.kt)("inlineCode",{parentName:"p"},"additionalConfig"),", is also available to your ",(0,a.kt)("a",{parentName:"p",href:"/guides/create-an-action"},"Action code"),". You can think of the ",(0,a.kt)("inlineCode",{parentName:"p"},"additionalConfig")," as a key-value store or document database to store data across different actions for a specific user and integration."),(0,a.kt)("p",null,"Here is what it could look like in practice for a Slack integration posting notifications to a user-selected channel:"),(0,a.kt)(i.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"node",label:"Node",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="In your main app code"',title:'"In',your:!0,main:!0,app:!0,'code"':!0},"// Store the user's preferred channelID in additionalConfig of the Connection\nfunction setSlackNotificationChannel(userId, newChannelId) {\n    const newConfig = {\n        channelId: newChannelId\n    };\n    nango.updateConnectionConfig('slack', userId, newConfig);\n}\n")),(0,a.kt)("p",null,"And then in your Action's ",(0,a.kt)("inlineCode",{parentName:"p"},"executeAction"),", note how the notification text is an input of the Action (it can change with every Action call) but the channel Id is set based on the configuration stored in the Connection (it stays the same for this user & this Integration):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="notify.action.ts"',title:'"notify.action.ts"'},"//...\noverride async executeAction(input: any) {\n    \n    // Get the user's preferred channelId\n    const connection = this.getCurrentConnection();\n    const channelId = (connection.additionalConfig.channelId) ? connection.additionalConfig.channelId : 'default value';\n\n    // Send the notification\n    const body = {\n        channelId: channelId,\n        text: input.msg,\n        mrkdwn: true\n    };\n\n    const response = await this.httpRequest('chat.postMessage', 'POST', undefined, body);\n    return response;\n}\n//...\n")),(0,a.kt)("p",null,"Check the reference for details on the ",(0,a.kt)("a",{parentName:"p",href:"/reference/actions#getCurrentConnection"},(0,a.kt)("inlineCode",{parentName:"a"},"getCurrentConnection")," method"),".")),(0,a.kt)(r.Z,{value:"other",label:"Other Languages",mdxType:"TabItem"},"Coming soon!")),(0,a.kt)("h2",{id:"getting-all-connections-for-a-specific-user-id"},"Getting all Connections for a specific user Id"),(0,a.kt)("p",null,"To get all Integrations which a user has setup you can query for all Connections of a user's id:"),(0,a.kt)(i.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"node",label:"Node",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const userId = '1';\nconst userConnections = await nango.getConnectionsForUserId(userId);\n\nconsole.log(`The user with id \"${userId}\" has these active connections:`, userConnections);\n")),(0,a.kt)("p",null,"For a detailed documentation of the returned connections object check the ",(0,a.kt)("a",{parentName:"p",href:"/reference/SDKs/node#getConnectionsForUserId"},"SDK reference for ",(0,a.kt)("inlineCode",{parentName:"a"},"getConnectionsForUserId")),".")),(0,a.kt)(r.Z,{value:"other",label:"Other Languages",mdxType:"TabItem"},"Coming soon!")),(0,a.kt)("p",null,"You might want to make Nango's response of this available as an endpoint in your own backend so the frontend can always query which Integrations the currently logged in user has set up."),(0,a.kt)("h2",{id:"getting-all-connections-of-a-specific-integration"},"Getting all Connections of a specific Integration"),(0,a.kt)("p",null,"To get all the users which have setup a specific Integration you can query for all Connections of an integration:"),(0,a.kt)(i.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"node",label:"Node",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const integration = 'slack';\nconst integrationConnections = await nango.getConnectionsForIntegration(integration);\n\nconsole.log(`The integration \"${integration}\" has these active connections:`, integrationConnections);\n")),(0,a.kt)("p",null,"For a detailed documentation of the returned connections object check the ",(0,a.kt)("a",{parentName:"p",href:"/reference/SDKs/node#getConnectionsForIntegration"},"SDK reference for ",(0,a.kt)("inlineCode",{parentName:"a"},"getConnectionsForIntegration")),".")),(0,a.kt)(r.Z,{value:"other",label:"Other Languages",mdxType:"TabItem"},"Coming soon!")),(0,a.kt)("p",null,"This method is especially helpful for Admin panels or background tasks, where you are e.g. checking periodically to whom you should send a Slack notification."),(0,a.kt)("h2",{id:"updating-credentials-for-an-existing-connection"},"Updating credentials for an existing Connection"),(0,a.kt)("p",null,"Sometimes you need to change the credentials of a Connection which already exists. There are two methods to do this, what is best depends on the Integration's authentication method:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You can ",(0,a.kt)("a",{parentName:"li",href:"/guides/auth#frontendOauth"},"re-trigger the OAuth flow in your frontend")," if the Integration supports OAuth. The user will have to go through the full OAuth flow again and re-authorize your app. ",(0,a.kt)("em",{parentName:"li"},"(recommended for OAuth based integrations)")),(0,a.kt)("li",{parentName:"ol"},"You update the Connection credentials from your backend by ",(0,a.kt)("a",{parentName:"li",href:"/reference/SDKs/node#updateConnectionCredentials"},"calling ",(0,a.kt)("inlineCode",{parentName:"a"},"updateConnectionCredentials"))," in the client SDK ",(0,a.kt)("em",{parentName:"li"},"(necessary for APIs which do not support OAuth)"))),(0,a.kt)("p",null,"Follow the links in the list above for a full code example of each flow."))}p.isMDXComponent=!0}}]);