"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[353],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),o=t(6010),s=t(2389),l=t(7392),i=t(7094),p=t(2466);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){var n;const{lazy:t,block:s,defaultValue:d,values:m,groupId:h,className:g}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??f.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,l.l)(b,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)??f[0].props.value;if(null!==k&&!b.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:_,setTabGroupChoices:N}=(0,i.U)(),[v,w]=(0,r.useState)(k),S=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=_[h];null!=e&&e!==v&&b.some((n=>n.value===e))&&w(e)}const T=e=>{const n=e.currentTarget,t=S.indexOf(n),a=b[t].value;a!==v&&(x(n),w(a),null!=h&&N(h,String(a)))},q=e=>{var n;let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;t=S[n]??S[0];break}case"ArrowLeft":{const n=S.indexOf(e.currentTarget)-1;t=S[n]??S[S.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},g)},b.map((e=>{let{value:n,label:t,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:e=>S.push(e),onKeyDown:q,onClick:T},s,{className:(0,o.Z)("tabs__item",c,null==s?void 0:s.className,{"tabs__item--active":v===n})}),t??n)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==v})))))}function m(e){const n=(0,s.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},2888:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=t(7462),r=(t(7294),t(3905)),o=t(5488),s=t(5162);const l={},i="Examples of Nango Sync",p={unversionedId:"real-world-examples",id:"real-world-examples",title:"Examples of Nango Sync",description:"The examples on this page are just a handful of the millions of APIs Nango supports out of the box, it is far from a complete list.",source:"@site/docs/real-world-examples.md",sourceDirName:".",slug:"/real-world-examples",permalink:"/real-world-examples",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/real-world-examples.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Observability",permalink:"/nango-sync/observability"},next:{title:"Deploy Nango Open Source",permalink:"/category/deploy-nango-open-source"}},u={},c=[{value:"Reddit: Sync all posts/submissions from a subreddit",id:"reddit-sync-all-postssubmissions-from-a-subreddit",level:2},{value:"Slack: Sync all posts from a Slack channel",id:"slack-sync-all-posts-from-a-slack-channel",level:2},{value:"Github: Sync all stargazers from a repo",id:"github-sync-all-stargazers-from-a-repo",level:2},{value:"HubSpot: Sync all HubSpot (CRM) contacts",id:"hubspot-sync-all-hubspot-crm-contacts",level:2}],d={toc:c};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples-of-nango-sync"},"Examples of Nango Sync"),(0,r.kt)("admonition",{title:"Nango works with any API that returns JSON",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The examples on this page are just a handful of the millions of APIs Nango supports out of the box, it is far from a complete list."),(0,r.kt)("p",{parentName:"admonition"},"If you are unsure if your API is supported by Nango feel free to try it (we found that by now 80%+ of APIs work out of the box) or ask us on the ",(0,r.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community"),": We are happy to help!")),(0,r.kt)("p",null,"A collection of cool things people have built with Nango.",(0,r.kt)("br",{parentName:"p"}),"\n","The sidebar to the right has an index so you can directly jump to your favorite \ud83d\udc49"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Want to run one of these? You can find these (and more) all ready to run in the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/NangoHQ/nango/tree/main/examples"},(0,r.kt)("inlineCode",{parentName:"a"},"/examples"))," in the repo."),(0,r.kt)("li",{parentName:"ul"},"Need help with one of these (or another API/endpoint)? Reach out on our ",(0,r.kt)("a",{parentName:"li",href:"https://nango.dev/slack"},"Community Slack"),", we are online all day and happy to help!"),(0,r.kt)("li",{parentName:"ul"},"Want to share yours? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/nangohq/nango/tree/main/docs/docs/real-world-examples.md"},"Edit this file and submit a PR!"))),(0,r.kt)("h2",{id:"reddit-sync-all-postssubmissions-from-a-subreddit"},"Reddit: Sync all posts/submissions from a subreddit"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.reddit.com/dev/api/#GET_new"},"https://www.reddit.com/dev/api/#GET_new")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all submissions from a subreddit to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet config = {\n        friendly_name: 'Reddit Subreddit Posts',                   // Give this Sync a name for prettier logs.\n        mapped_table: 'reddit_posts',                              // Name of the destination SQL table\n        response_path: 'data.children',                            // For finding records in the API response.\n        paging_cursor_object_response_path: 'data.name',           // For finding pagination data in responses.\n        paging_cursor_request_path: 'after',                       // For adding pagination data in requests.\n        max_total: 100,                                            // For fetching limited records while testing.\n        frequency: '1 minute'                                      // How often sync jobs run in natural language.\n    };\n\nnew Nango().sync('https://www.reddit.com/r/glastonbury_festival/new.json', config);  // Replace 'glastonbury_festival' with your subreddit\n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://www.reddit.com/r/glastonbury_festival/new.json",\n"friendly_name": "Reddit Subreddit Posts",\n"mapped_table": "reddit_posts",\n"response_path": "data.children",\n"paging_cursor_object_response_path": "data.name",\n"paging_cursor_request_path": "after",\n"max_total": 100,\n"frequency": "1 minute"\n}\'\n\n# url: Replace \'glastonbury_festival\' with your subreddit.\n# friendly_name: Give this Sync a name for prettier logs.\n# mapped_table: Name of the destination SQL table\n# response_path: For finding records in the API response.\n# paging_cursor_object_response_path: For finding pagination data in responses.\n# paging_cursor_request_path: For adding pagination data in requests.\n# max_total: For fetching limited records while testing.\n# frequency: How often sync jobs run in natural language.\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from the ",(0,r.kt)("inlineCode",{parentName:"p"},"nango")," folder root with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run example syncRedditSubredditPosts <subreddit>\n")),(0,r.kt)("h2",{id:"slack-sync-all-posts-from-a-slack-channel"},"Slack: Sync all posts from a Slack channel"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://api.slack.com/methods/conversations.history"},"https://api.slack.com/methods/conversations.history")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all posts from a Slack channel to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet app_token = \"fake-token\";        // Replace with your Slack app token.\nlet channel_id = 'fake-id';          // Replace with the ID of the channel you want to sync.\n\nlet config = {\n        friendly_name: 'Slack Messages',                                        // Give this Sync a name for prettier logs.\n        mapped_table: 'slack_messages',                                         // Name of the destination SQL table\n        response_path: 'messages',                                              // For finding records in the API response.\n        paging_cursor_metadata_response_path: 'response_metadata.next_cursor',  // For finding pagination data in responses.\n        paging_cursor_request_path: 'cursor',                                   // For adding pagination data in requests.          \n        headers: { authorization: `Bearer ${app_token}` },                      // Replace with your Slack app token\n        query_params: { channel: channel_id },                                  // Replace with the ID of the channel\n        max_total: 100,                                                         // For fetching limited records while testing.\n        frequency: '1 minute'                                                   // How often sync jobs run in natural language.\n    };\n\nnew Nango().sync('https://slack.com/api/conversations.history', config); \n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://slack.com/api/conversations.history",\n"friendly_name": "Slack Messages",\n"mapped_table": "slack_messages",\n"response_path": "messages",\n"paging_cursor_metadata_response_path": "response_metadata.next_cursor",\n"paging_cursor_request_path": "cursor",\n"headers": { "authorization": "Bearer [APP-TOKEN]" },\n"query_params": { "channel": "[CHANNEL-ID]" },\n"max_total": 100,\n"frequency": "1 minute"\n}\'\n\n# url: external API endpoint to use.\n# friendly_name: Give this Sync a name for prettier logs.\n# mapped_table: Name of the destination SQL table\n# response_path: For finding records in the API response.\n# paging_cursor_metadata_response_path: For finding pagination data in responses.\n# paging_cursor_request_path: For adding pagination data in # requests.          \n# headers: Replace with your Slack app token\n# query_params: Replace with the ID of the channel\n# max_total: For fetching limited records while testing.\n# frequency: How often sync jobs run in natural language.\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from the ",(0,r.kt)("inlineCode",{parentName:"p"},"nango")," folder root with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run example syncSlackMessages <oauth_token> <channel_id>\n")),(0,r.kt)("h2",{id:"github-sync-all-stargazers-from-a-repo"},"Github: Sync all stargazers from a repo"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/activity/starring#list-stargazers"},"https://docs.github.com/en/rest/activity/starring#list-stargazers")),(0,r.kt)("p",null,"This example syncs the stargazers of multiple different repos (and users) into a single table (we use ",(0,r.kt)("inlineCode",{parentName:"p"},"github_stargazers")," here). It also adds metadata attributes, which get attached to every synced record."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync all stargazers from a repo to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet owner = 'nangohq';  // Replace with your github account\nlet repo = 'nango';     // Replace with your repo\n\nlet config = {\n    friendly_name: 'Github Stargazers',                // Give this Sync a name for prettier logs.\n    mapped_table: 'github_stargazers',                 // Name of the destination SQL table.\n    metadata: {                                        // Metadata that will get attached to every synced row.\n        github_org: owner,                             // The GitHub org.\n        github_repo: repo                              // The repo name.\n    },\n    unique_key: 'id',                                  // The key of the unique id in the records, for upserts.\n    headers: {                                         // HTTP headers to be sent with every API request.\n        'Accept': 'application/vnd.github+json'        // GitHub recommends passing this for every API request.\n    },\n    paging_header_link_rel: 'next',                    // For pagination.\n    max_total: 100,                                    // For fetching limited records while testing.\n    frequency: '1 minute'                              // How often sync jobs run in natural language.\n};\n\nnew Nango().sync('https://api.github.com/repos/${owner}/${repo}/stargazers', config); \n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://api.github.com/repos/nangohq/nango/stargazers",\n"friendly_name": "Github Stargazers",\n"mapped_table": "github_stargazers",\n"metadata": { "github_org": "NangoHQ", "github_repo": "nango" },\n"unique_key": "id",\n"headers": { "Accept": "application/vnd.github+json" },\n"paging_header_link_rel": "next",\n"max_total": 100,\n"frequency": "1 minute"\n}\'\n\n# url: external API endpoint to use.\n# friendly_name: Give this Sync a name for prettier logs.\n# mapped_table: Name of the destination SQL table.\n# metadata: Metadata that will get attached to every synced row.\n# unique_key: The key of the unique id in the records, for upserts.\n# headers: HTTP headers to be sent with every API request.\n# paging_header_link_rel: For pagination.\n# max_total: For fetching limited records while testing.\n# frequency: How often sync jobs run in natural language.\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from the ",(0,r.kt)("inlineCode",{parentName:"p"},"nango")," folder root with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run example syncGithubStargazers <owner> <repo>\n")),(0,r.kt)("h2",{id:"hubspot-sync-all-hubspot-crm-contacts"},"HubSpot: Sync all HubSpot (CRM) contacts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint docs:"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://developers.hubspot.com/docs/api/crm/contacts"},"https://developers.hubspot.com/docs/api/crm/contacts"),(0,r.kt)("br",{parentName:"p"}),"\n",'(click on the "Endpoints" tab, the use the dropdown to find the endpoint or scroll down)'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nango Sync config to sync contacts from the HubSpot CRM to your local database:")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node-client'\n\nlet api_token = \"fake-token\";      // Your Hubspot API token\n\nlet config = {\n    friendly_name: 'Hubspot Contacts',                         // Give this Sync a name for prettier logs.\n    mapped_table: 'hubspot_contacts',                          // Name of the destination SQL table\n    method: NangoHttpMethod.GET,                               // Required info to query the right endpoint.\n    headers: { authorization: `Bearer ${api_token}` },         // For auth.\n    query_params: { limit: 100 },                              // Get 100 records per page (HubSpot API setting)\n    paging_cursor_request_path: 'after',                       // For adding pagination data in requests.\n    paging_cursor_metadata_response_path: 'paging.next.after', // For finding pagination data in responses.\n    response_path: 'results',                                  // For finding records in the API response.\n    unique_key: 'id',                                          // Provide response field path for deduping records.\n    max_total: 100,                                            // For fetching limited records while testing.\n    frequency: '1 minute'                                      // How often sync jobs run in natural language.\n};\n\nnew Nango().sync('https://api.hubapi.com/crm/v3/objects/contacts', config);\n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'\n{\n"url": "https://api.hubapi.com/crm/v3/objects/contacts/search",\n"friendly_name": "Hubspot Contacts",\n"method": "POST",\n"headers": { "Authorization": "Bearer [YOUR-ACCESS-TOKEN]"},\n"paging_cursor_request_path": "after",\n"paging_cursor_metadata_response_path": "paging.next.after",\n"response_path": "results",\n"unique_key": "id",\n"max_total": 100,\n"frequency": "1 minute"\n}\'\n\n# friendly_name: \'Give this Sync a name for prettier logs.\n# mapped_table: Name of the destination SQL table\n# method: Required info to query the right endpoint.\n# headers: Add the relevant auth header.\n# paging_cursor_request_path: For adding pagination data in requests.\n# paging_cursor_metadata_response_path: For finding pagination data in responses.\n# response_path: For finding records in the API response.\n# unique_key: Provide response field path for deduping records.\n# max_total: For fetching limited records while testing.\n# frequency: How often sync jobs run in natural language.\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run the example \u25b6\ufe0f"),(0,r.kt)("br",{parentName:"p"}),"\n","You can run this example from the ",(0,r.kt)("inlineCode",{parentName:"p"},"nango")," folder root with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run example syncHubspotContacts <oauth_token>\n")))}m.isMDXComponent=!0}}]);