"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4,sidebar_label:"Fetch Contacts"},l="Fetch contacts endpoint",i={unversionedId:"fetch-contacts",id:"fetch-contacts",title:"Fetch contacts endpoint",description:"The contacts api offers the following endpoints:",source:"@site/docs/fetch-contacts.md",sourceDirName:".",slug:"/fetch-contacts",permalink:"/fetch-contacts",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/fetch-contacts.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Fetch Contacts"},sidebar:"docsSidebar",previous:{title:"User authentication",permalink:"/user-authentication"},next:{title:"Fetch Accounts",permalink:"/fetch-accounts"}},s={},c=[{value:"Fetch all contacts",id:"fetchContacts",level:2},{value:"Query parameters",id:"query-parameters",level:4},{value:"Fetch a specific contact",id:"fetchContact",level:2},{value:"Path parameters",id:"path-parameters",level:4},{value:"Query parameters",id:"query-parameters-1",level:4}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fetch-contacts-endpoint"},"Fetch contacts endpoint"),(0,r.kt)("p",null,"The contacts api offers the following endpoints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#fetchContacts"},"Fetch all contacts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#fetchContact"},"Fetch a specific contact by id"))),(0,r.kt)("p",null,"For an example of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Contact")," object check the examples below."),(0,r.kt)("h2",{id:"fetchContacts"},"Fetch all contacts"),(0,r.kt)("p",null,"Endpoint: ",(0,r.kt)("inlineCode",{parentName:"p"},"/crm/contacts"),(0,r.kt)("br",{parentName:"p"}),"\n","HTTP Method: ",(0,r.kt)("strong",{parentName:"p"},"GET"),(0,r.kt)("br",{parentName:"p"}),"\n","Headers: API key and user token are mandatory, ",(0,r.kt)("a",{parentName:"p",href:"/basics"},"see API basics"),(0,r.kt)("br",{parentName:"p"}),"\n","Sample call (CURL):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XGET \\\n-H 'Authorization: Bearer <api-key>' \\\n-H 'X-User-Token: <user-token>' \\\n'https://api.nango.dev/v1/crm/contacts'\n")),(0,r.kt)("h4",{id:"query-parameters"},"Query parameters"),(0,r.kt)("p",null,"The following query parameters are available (all are optional)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"email")," (string): Comma separated string of email addresses. If present, only contacts where one of the email addresses on record is present in the list are returned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"account")," (string, uuid): Comma separates string of account UUIDs. If present, only contacts where the account uuid is present in the list are returned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"name")," (string): If present only contacts which have ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," in either their ",(0,r.kt)("inlineCode",{parentName:"li"},"first_name")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"last_name")," property are returned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"include_raw")," (boolean): If set to true the response will include the raw original API response of the external system with all fields & data.")),(0,r.kt)("p",null,"Sample response (JSON):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": "ok",\n    "result": [\n        {\n            "id": "ccc560e4-6bab-41fd-a0cd-fc94d5152de3",\n            "external_id": "128492",\n            "first_name": "Rolf",\n            "last_name": "Sample",\n            "job_title": "Director of Operations",\n            "account": "f7db1f94-9087-4ba0-aa7d-3ea96e714771",\n            "adresses": [\n                {\n                    "street_1": "1379 Lexington Ave",\n                    "street_2": "Golden Gate Park",\n                    "city": "New York",\n                    "state": "NY",\n                    "zip_code": "94122",\n                    "country": "USA",\n                    "address_type": "WORK"\n                }\n            ]\n            "email_adresses": [\n                {\n                    "email": "rolph@supercord.com",\n                    "email_type": "WORK"\n                },\n                {\n                    "email": "rolph@gmail.com",\n                    "email_type": "PERSONAL"\n                }\n            ],\n            "phone_numbers": [\n                {\n                    "phone_number": "+1738929928",\n                    "phone_number_type": "MOBILE"\n                }\n            ],\n            "last_activity_at": "2022-08-28T08:02:29Z",\n            "external_created_at": "2008-12-10T19:23:18Z",\n            "external_modified_at": "2022-06-07T12:38:28Z",\n            "raw_external_data": {\n                // Raw response with all data as delivered by the external system.\n                // Only provided if "include_raw" is set to true\n            }\n        }\n    ]\n}\n')),(0,r.kt)("h2",{id:"fetchContact"},"Fetch a specific contact"),(0,r.kt)("p",null,"Endpoint: ",(0,r.kt)("inlineCode",{parentName:"p"},"/crm/contacts/:id"),(0,r.kt)("br",{parentName:"p"}),"\n","HTTP Method: ",(0,r.kt)("strong",{parentName:"p"},"GET"),(0,r.kt)("br",{parentName:"p"}),"\n","Headers: API key and user token are mandatory, ",(0,r.kt)("a",{parentName:"p",href:"/basics"},"see API basics"),(0,r.kt)("br",{parentName:"p"}),"\n","Sample call (CURL):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XGET \\\n-H 'Authorization: Bearer <api-key>' \\\n-H 'X-User-Token: <user-token>' \\\n'https://api.nango.dev/v1/crm/contacts/ccc560e4-6bab-41fd-a0cd-fc94d5152de3'\n")),(0,r.kt)("h4",{id:"path-parameters"},"Path parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},":id")," (string, uuid, required): The ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," property of the contact to be returned")),(0,r.kt)("h4",{id:"query-parameters-1"},"Query parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"include_raw")," (boolean): If set to true the response will include the raw original API response of the external system with all fields & data.")),(0,r.kt)("p",null,"Sample response (JSON):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": "ok",\n    "result": {\n        "id": "ccc560e4-6bab-41fd-a0cd-fc94d5152de3",\n        "external_id": "128492",\n        "first_name": "Rolf",\n        "last_name": "Sample",\n        "job_title": "Director of Operations",\n        "account": "f7db1f94-9087-4ba0-aa7d-3ea96e714771",\n        "adresses": [\n            {\n                "street_1": "1379 Lexington Ave",\n                "street_2": "Golden Gate Park",\n                "city": "New York",\n                "state": "NY",\n                "zip_code": "94122",\n                "country": "USA",\n                "address_type": "WORK"\n            }\n        ]\n        "email_adresses": [\n            {\n                "email": "rolph@supercord.com",\n                "email_type": "WORK"\n            },\n            {\n                "email": "rolph@gmail.com",\n                "email_type": "PERSONAL"\n            }\n        ],\n        "phone_numbers": [\n            {\n                "phone_number": "+1738929928",\n                "phone_number_type": "MOBILE"\n            }\n        ],\n        "last_activity_at": "2022-08-28T08:02:29Z",\n        "external_created_at": "2008-12-10T19:23:18Z",\n        "external_modified_at": "2022-06-07T12:38:28Z",\n        "raw_external_data": {\n            // Raw response with all data as delivered by the external system.\n            // Only provided if "include_raw" is set to true\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);