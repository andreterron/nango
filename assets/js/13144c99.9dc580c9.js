"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,d=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={},l="Schema mappings",r={unversionedId:"nango-sync/schema-mappings",id:"nango-sync/schema-mappings",title:"Schema mappings",description:"Nango offers a few different ways to transform and access the synced data in your database:",source:"@site/docs/nango-sync/schema-mappings.md",sourceDirName:"nango-sync",slug:"/nango-sync/schema-mappings",permalink:"/nango-sync/schema-mappings",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/nango-sync/schema-mappings.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Manage Syncs",permalink:"/nango-sync/manage-syncs"},next:{title:"DB configuration",permalink:"/nango-sync/db-config"}},s={},p=[{value:"Automatic JSON-to-SQL schema mapping",id:"automatic-json-to-sql-schema-mapping",level:2},{value:"How Nango determines the data schema",id:"how-nango-determines-the-data-schema",level:3},{value:"How Nango treats data that does not align with the schema",id:"how-nango-treats-data-that-does-not-align-with-the-schema",level:3},{value:"How Nango deals with schema changes",id:"how-nango-deals-with-schema-changes",level:3},{value:"How to disable Auto Mapping",id:"how-to-disable-auto-mapping",level:3},{value:"Configuring a Sync&#39;s destination table",id:"destination-table",level:2},{value:"Custom Mapping (coming soon)",id:"custommapping",level:2},{value:"Accessing the raw JSON objects",id:"accessing-the-raw-json-objects",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"schema-mappings"},"Schema mappings"),(0,o.kt)("p",null,"Nango offers a few different ways to transform and access the synced data in your database:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Automatic JSON to SQL schema mapping"),(0,o.kt)("li",{parentName:"ul"},"Access to the raw JSON object "),(0,o.kt)("li",{parentName:"ul"},"Custom, manually configured schema mappings (coming soon)")),(0,o.kt)("h2",{id:"automatic-json-to-sql-schema-mapping"},"Automatic JSON-to-SQL schema mapping"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Automatically inferring a schema from API responses is tricky. If you run into issues or want to understand why your schema came out the way it did we are happy to help you in the ",(0,o.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community"),"!"),(0,o.kt)("p",{parentName:"admonition"},"In the near future we will also support ",(0,o.kt)("a",{parentName:"p",href:"#custommapping"},"custom mappings")," which will give you full control over the destination schema of Nango's mapping.")),(0,o.kt)("h3",{id:"how-nango-determines-the-data-schema"},"How Nango determines the data schema"),(0,o.kt)("p",null,"By default, Nango automatically maps the JSON objects returned from external APIs to SQL columns. The mapping rules are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Nested fields are flattened and the path is joined with ",(0,o.kt)("inlineCode",{parentName:"li"},"_")," into a single column name"),(0,o.kt)("li",{parentName:"ul"},"Arrays are flattened into multiple columns with suffix ",(0,o.kt)("inlineCode",{parentName:"li"},"_[index]")),(0,o.kt)("li",{parentName:"ul"},"Null values are ignored"),(0,o.kt)("li",{parentName:"ul"},"Data types are inferred, but currently only for these supported types: string, number, date, boolean")),(0,o.kt)("p",null,"Here is an example: "),(0,o.kt)("p",null,"The following JSON response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "field": true,\n  "parent": {"nested": "string_value"},\n  "nullField": null,\n  "list": [1, 2]\n}\n')),(0,o.kt)("p",null,"turns into this SQL table: "),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"field (boolean)"),(0,o.kt)("th",{parentName:"tr",align:null},"parent_nested (string)"),(0,o.kt)("th",{parentName:"tr",align:null},"list_0 (number)"),(0,o.kt)("th",{parentName:"tr",align:null},"list_1 (number)"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null},"string_value"),(0,o.kt)("td",{parentName:"tr",align:null},"1"),(0,o.kt)("td",{parentName:"tr",align:null},"2")))),(0,o.kt)("h3",{id:"how-nango-treats-data-that-does-not-align-with-the-schema"},"How Nango treats data that does not align with the schema"),(0,o.kt)("p",null,"Once a schema with data types has been generated, Nango will only store values in the SQL table that align with the data type of the schema.\nAs an example, let's assume the field ",(0,o.kt)("inlineCode",{parentName:"p"},"num_users")," has type number and these objects get returned by the API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "obj1",\n    "num_users": 23\n  },\n  {\n    "name": "obj2",\n    "num_users": 182\n  },\n  {\n    "name": "obj3",\n    "num_users": "nango is great"\n  }\n]\n')),(0,o.kt)("p",null,"In this case Nango would store the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"num_users")," for obj1 and obj2, but not for obj3 (because the type string is not compatible with the schema's type number)."),(0,o.kt)("h3",{id:"how-nango-deals-with-schema-changes"},"How Nango deals with schema changes"),(0,o.kt)("p",null,"Nango will also change the schema of the generated table if the schema of the API response changes.\nCurrently the following transformations are supported: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If a previously unseen field appears in the JSON, the relevant SQL column will be created (with the right data type)"),(0,o.kt)("li",{parentName:"ul"},"If a previously seen field is not present in the JSON nothing happens (if a field is there we store it's value, if its not there we just ignore that)")),(0,o.kt)("h3",{id:"how-to-disable-auto-mapping"},"How to disable Auto Mapping"),(0,o.kt)("p",null,"Auto mapping is on by default for new Syncs. You can disable Auto Mapping for an individual Sync by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"auto_mapping")," field to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," in the ",(0,o.kt)("a",{parentName:"p",href:"/nango-sync/sync-all-options"},"Sync config options"),"."),(0,o.kt)("h2",{id:"destination-table"},"Configuring a Sync's destination table"),(0,o.kt)("p",null,"You can configure a Sync's destination database table with the ",(0,o.kt)("inlineCode",{parentName:"p"},"mapped_table")," parameter in the ",(0,o.kt)("a",{parentName:"p",href:"/nango-sync/sync-all-options"},"Sync config options"),". "),(0,o.kt)("p",null,"You can also configure multiple Syncs to send data to the same destination table, for this just pass the same value to the ",(0,o.kt)("inlineCode",{parentName:"p"},"mapped_table")," parameter for these Syncs."),(0,o.kt)("p",null,"If you specify a table that does not already exist, it will be automatically generated. The data schema for this table will be automatically updated (according to the rules outlined above) based on the data to insert."),(0,o.kt)("p",null,"If you only specify a table name in the ",(0,o.kt)("inlineCode",{parentName:"p"},"mapped_table")," parameter, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"pokemon"),", Nango will use (or create) the table in the ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/ddl-schemas.html"},"default schema of your Postgres")," database (by default this is called ",(0,o.kt)("inlineCode",{parentName:"p"},"public"),"). If you want to use a table in a different schema you can tell this Nango by prefixing the table name with the schema name: For example, setting ",(0,o.kt)("inlineCode",{parentName:"p"},"mapped_table")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"myschema.pokemons")," sends the synced data to the",(0,o.kt)("inlineCode",{parentName:"p"},"pokemons")," table in the database schema ",(0,o.kt)("inlineCode",{parentName:"p"},"myschema"),"."),(0,o.kt)("h2",{id:"custommapping"},"Custom Mapping (coming soon)"),(0,o.kt)("p",null,"We plan to introduce custom mappings soon. These will allow you to specify exactly (in code) how you want the JSON mapped to a SQL-table.\nThis will enable a few interesting features:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Stable SQL schemas that are guaranteed not to change even as the API response changes (with optional alerts for response changes)"),(0,o.kt)("li",{parentName:"ul"},"The ability to specify which fields should be extracted from the JSON (and which should be ignored)"),(0,o.kt)("li",{parentName:"ul"},"Optional, more complex transformations & mappings (e.g. combining data from multiple JSON-fields into one SQL column, transforming values etc.)")),(0,o.kt)("h2",{id:"accessing-the-raw-json-objects"},"Accessing the raw JSON objects"),(0,o.kt)("p",null,"Nango stores all the objects, in their original JSON form, in a combined SQL table called ",(0,o.kt)("inlineCode",{parentName:"p"},"_nango_raw")," within the schema ",(0,o.kt)("inlineCode",{parentName:"p"},"nango"),"."))}c.isMDXComponent=!0}}]);