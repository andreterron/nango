"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||r;return t?o.createElement(m,i(i({ref:n},u),{},{components:t})):o.createElement(m,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(7294),a=t(6010);const r="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>f});var o=t(7462),a=t(7294),r=t(6010),i=t(2389),l=t(7392),s=t(7094),c=t(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var n;const{lazy:t,block:i,defaultValue:d,values:f,groupId:m,className:b}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=f??y.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),g=(0,l.l)(h,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)??y[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,s.U)(),[j,O]=(0,a.useState)(v),N=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=m){const e=k[m];null!=e&&e!==j&&h.some((n=>n.value===e))&&O(e)}const T=e=>{const n=e.currentTarget,t=N.indexOf(n),o=h[t].value;o!==j&&(E(n),O(o),null!=m&&w(m,String(o)))},S=e=>{var n;let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},b)},h.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:j===n?0:-1,"aria-selected":j===n,key:n,ref:e=>N.push(e),onKeyDown:S,onClick:T},i,{className:(0,r.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":j===n})}),t??n)}))),t?(0,a.cloneElement)(y.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==j})))))}function f(e){const n=(0,i.Z)();return a.createElement(d,(0,o.Z)({key:String(n)},e))}},6676:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(7462),a=(t(7294),t(3905));t(5488),t(5162);const r={},i="Sync notifications",l={unversionedId:"nango-sync/sync-notifications",id:"nango-sync/sync-notifications",title:"Sync notifications",description:"Nango uses webhooks to notify your app in real-time when Sync jobs finish.",source:"@site/docs/nango-sync/sync-notifications.md",sourceDirName:"nango-sync",slug:"/nango-sync/sync-notifications",permalink:"/nango-sync/sync-notifications",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/nango-sync/sync-notifications.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Manage Syncs",permalink:"/nango-sync/manage-syncs"},next:{title:"Schema mappings",permalink:"/nango-sync/schema-mappings"}},s={},c=[{value:"Webhook configuration",id:"webhook-configuration",level:2},{value:"Job success notifications",id:"job-success-notifications",level:2},{value:"Job failure notifications",id:"job-failure-notifications",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sync-notifications"},"Sync notifications"),(0,a.kt)("p",null,"Nango uses webhooks to notify your app in real-time when Sync jobs finish."),(0,a.kt)("h2",{id:"webhook-configuration"},"Webhook configuration"),(0,a.kt)("p",null,"To receive job completion notifications, specify a webhook URL using the ",(0,a.kt)("inlineCode",{parentName:"p"},"NANGO_WEBHOOK_URL")," environment variable (in the ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file at the root of the nango folder)."),(0,a.kt)("p",null,"Nango will send a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," request to this URL on job completions."),(0,a.kt)("h2",{id:"job-success-notifications"},"Job success notifications"),(0,a.kt)("p",null,"When a Sync job successfully completes, you might want to quickly use the recently imported data."),(0,a.kt)("p",null,"The body payload of the webhook you will receive is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{\n    type: 'job_success',\n    job: {...},              // Detailed information about the completed job (all fields: https://github.com/NangoHQ/nango/blob/main/packages/worker/lib/models/job.model.ts)\n    sync: {...},             // The configuration of your Sync (all fields: https://github.com/NangoHQ/nango/blob/main/packages/core/lib/sync.model.ts)\n    info: {\n        added: [...],        // Ids of the added records (same Ids are used for the raw & mapped data)\n        updated: [...],      // Ids of the updated records\n        deleted: [...]       // Ids of the deleted records\n    }\n}\n")),(0,a.kt)("h2",{id:"job-failure-notifications"},"Job failure notifications"),(0,a.kt)("p",null,"When a Sync job fails, you might want to send an alert to quickly investigate the issue. "),(0,a.kt)("p",null,"The body payload of the webhook you will receive is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{\n    type: 'job_failure',\n    job: {...},              // Detailed information about the completed job, including the error description, stacktrace, etc. (all fields: https://github.com/NangoHQ/nango/blob/main/packages/worker/lib/models/job.model.ts)\n    sync: {...}             // The configuration of your Sync (all fields: https://github.com/NangoHQ/nango/blob/main/packages/core/lib/sync.model.ts)\n}\n")))}p.isMDXComponent=!0}}]);